import argparse

def args_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--framework', type=str, default='ditto', choices=['FLAME', 'pFedMe', 'ditto', 'lp-proj-2','FLAME-lp-proj-2'], help="federated learning framework")
    parser.add_argument('--partition', type=str, default='hybrid-skew',
                        choices=['hybrid-skew', 'dir-label-skew', 'q-label-skew', 'quality-skew', 'dir-quantity-skew','feature-skew'], help="type of partitioning data")
    parser.add_argument('--num_users', type=int, default=10, help="number of users, must be a multiple of 5")
    parser.add_argument('--noise_scale', type=float, default=0.1, help='when partition=quality-skew, use this param')
    parser.add_argument('--q', type=int, default=2, help='number of labels in each client')
    parser.add_argument('--corrupted', type=str, default='0', choices=['0', '1', '2', '3', '4'], help='0: no attack, 1: label poison, 2: SVA, 3: SFA, 4: GA')
    parser.add_argument('--num_malicious', type=int, default=0, help='fraction of malicious clients')
    parser.add_argument('--aggr', type=str, default='regular', help='robust aggregation method', choices=['regular'])
    parser.add_argument('--model', type=str, default='MLP', choices=['MLP', 'CNN', 'CNN1', 'CNN2'], help='model name')
    parser.add_argument('--dataset', type=str, default='mnist', choices=['mnist', "fmnist", 'mmnist', "cifar10", 'femnist', 'synthetic'], help="name of dataset")
    parser.add_argument('--strategy', type=str, default='full', choices=['random', 'full'], help="client selection strategy")
    parser.add_argument('--frac_candidates', type=float, default=0.5, help='fraction of clients candidates: S')
    parser.add_argument('--frac', type=float, default=0.5, help='fraction of clients: C')
    parser.add_argument('--optimizer', type=str, default='sgd', help="type of optimizer")
    parser.add_argument('--momentum', type=float, default=0.5, help='SGD momentum')
    parser.add_argument('--epochs', type=int, default=100, help='total communication rounds')
    parser.add_argument('--local_ep', type=int, default=1, help='number of local epochs: E')
    parser.add_argument('--local_bs', type=int, default=100, help="local batch size: B")
    parser.add_argument('--lr', type=float, default=0.01, help='learning rate')
    parser.add_argument('--mu', type=float, default=0.01, help='hpy in regularization term')
    parser.add_argument('--Lambda', type=float, default=1, help='hpy in Moreau Envelope')
    parser.add_argument('--rho', type=float, default=0.1, help='hyp in Penalty term')
    parser.add_argument('--iid', type=int, default=0, help='Default set to IID. Set to 0 for non-IID.')
    parser.add_argument('--file_name', type=str, default='name', help='file name')
    parser.add_argument('--seed', type=int, default=14, help='random seed')
    parser.add_argument('--fixed', type=int, default=1, help='fixed local epochs, 1 for fixed')
    parser.add_argument('--eta', type=float, default=0.1, help='learning rate of global model (pfedme)')
    parser.add_argument('--eta2', type=float, default=0.1, help="learning rate of global model (ditto)")
    args = parser.parse_args()
    return args
